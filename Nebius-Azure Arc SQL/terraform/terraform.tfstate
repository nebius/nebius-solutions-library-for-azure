{
  "version": 4,
  "terraform_version": "1.2.8",
  "serial": 14,
  "lineage": "63c32c31-00f5-a9da-c9b5-31c9ed8809af",
  "outputs": {},
  "resources": [
    {
      "mode": "data",
      "type": "template_file",
      "name": "user_data",
      "provider": "provider[\"registry.terraform.io/hashicorp/template\"]",
      "instances": [
        {
          "schema_version": 0,
          "attributes": {
            "filename": null,
            "id": "9d1d8bdbf6a544a792ab88756aefd7f6ce442b9e2b6d42d602906f934fec2094",
            "rendered": "#ps1\nnet user Administrator AzureArcDemoPassw0rd!\nSet-ExecutionPolicy Unrestricted -Scope LocalMachine -Force -ErrorAction Ignore\nRemove-Item -Path WSMan:\\Localhost\\listener\\listener* -Recurse\nEnable-PSRemoting -SkipNetworkProfileCheck -Force\nSet-MpPreference -DisableRealtimeMonitoring $true\nnetsh advfirewall set  allprofiles state off\nwinrm quickconfig -q\nwinrm quickconfig -transport:http\nwinrm set winrm/config/service '@{AllowUnencrypted=\"true\"}'\nwinrm set winrm/config/service/auth '@{Basic=\"true\"}'\nwinrm set winrm/config/client/auth '@{Basic=\"true\"}'\nnet stop winrm\nsc.exe config winrm start=auto\nnet start winrm\nRename-Computer -NewName 'sql-arc-vm' -Force\nRestart-Computer -Force\n",
            "template": "#ps1\nnet user ${admin_user} ${admin_password}\nSet-ExecutionPolicy Unrestricted -Scope LocalMachine -Force -ErrorAction Ignore\nRemove-Item -Path WSMan:\\Localhost\\listener\\listener* -Recurse\nEnable-PSRemoting -SkipNetworkProfileCheck -Force\nSet-MpPreference -DisableRealtimeMonitoring $true\nnetsh advfirewall set  allprofiles state off\nwinrm quickconfig -q\nwinrm quickconfig -transport:http\nwinrm set winrm/config/service '@{AllowUnencrypted=\"true\"}'\nwinrm set winrm/config/service/auth '@{Basic=\"true\"}'\nwinrm set winrm/config/client/auth '@{Basic=\"true\"}'\nnet stop winrm\nsc.exe config winrm start=auto\nnet start winrm\nRename-Computer -NewName '${hostname}' -Force\nRestart-Computer -Force\n",
            "vars": {
              "admin_password": "AzureArcDemoPassw0rd!",
              "admin_user": "Administrator",
              "hostname": "sql-arc-vm"
            }
          },
          "sensitive_attributes": []
        }
      ]
    },
    {
      "mode": "managed",
      "type": "azurerm_resource_group",
      "name": "az_rg",
      "provider": "provider[\"registry.terraform.io/hashicorp/azurerm\"]",
      "instances": [
        {
          "schema_version": 0,
          "attributes": {
            "id": "/subscriptions/0735fd1a-513b-4973-a654-4f850df181d0/resourceGroups/azure-arc-demo",
            "location": "westeurope",
            "name": "azure-arc-demo",
            "tags": {},
            "timeouts": null
          },
          "sensitive_attributes": [],
          "private": "eyJlMmJmYjczMC1lY2FhLTExZTYtOGY4OC0zNDM2M2JjN2M0YzAiOnsiY3JlYXRlIjo1NDAwMDAwMDAwMDAwLCJkZWxldGUiOjU0MDAwMDAwMDAwMDAsInJlYWQiOjMwMDAwMDAwMDAwMCwidXBkYXRlIjo1NDAwMDAwMDAwMDAwfX0="
        }
      ]
    },
    {
      "mode": "managed",
      "type": "local_file",
      "name": "install_arc_agent_ps1",
      "provider": "provider[\"registry.terraform.io/hashicorp/local\"]",
      "instances": [
        {
          "schema_version": 0,
          "attributes": {
            "content": "param ($servicePrincipalAppId, $servicePrincipalTenantId, $servicePrincipalSecret)\n\n# These settings will be replaced by the portal when the script is generated\n$subId = \"0735fd1a-513b-4973-a654-4f850df181d0\"\n$resourceGroup = \"azure-arc-demo\"\n$location = \"westeurope\"\n$proxy=\"\"\n$resourceTags= @{\"Project\"=\"jumpstart_azure_arc_sql\"}\n\n\n# These optional variables can be replaced with valid service principal details\n# if you would like to use this script for a registration at scale scenario, i.e. run it on multiple machines remotely\n# For more information, see https://docs.microsoft.com/sql/sql-server/azure-arc/connect-at-scale\n#\n# For security purposes, passwords should be stored in encrypted files as secure strings\n#\n$servicePrincipalAppId = '619d5d9a-26f9-4a1f-9824-83f728e101cf'\n$servicePrincipalTenantId = '8dfe9017-7fce-45cd-a294-8799321cc073'\n$servicePrincipalSecret = 'kvc8Q~tih9fIauJnhavVCrX1DwZnL~DWEU1V9bZy'\n\n\n$unattended = $servicePrincipalAppId -And $servicePrincipalTenantId -And $servicePrincipalSecret\n\nfunction registerArcForServers() {\n    # Download the package\n    #\n    $ProgressPreference = \"SilentlyContinue\"; \n    Invoke-WebRequest -Uri https://aka.ms/AzureConnectedMachineAgent -OutFile AzureConnectedMachineAgent.msi\n    \n    # Install the package\n    #\n    Write-Host \"Installing the Azure Arc for Servers package\"\n    $params = @(\"/i\", \"AzureConnectedMachineAgent.msi\", \"/l*v\", \"installationlog.txt\", \"/qn\")\n    \n    $install_success = (Start-Process -FilePath msiexec.exe -ArgumentList $params -Wait -Passthru).ExitCode\n    if ($install_success -ne 0) {\n        Write-Error -Message \"Azure Arc for Servers package installation failed.\"\n        return\n    }\n\n    if ($proxy) {\n        # Set the proxy environment variable. Note that authenticated proxies are not supported for Public Preview.\n        [System.Environment]::SetEnvironmentVariable(\"https_proxy\", $proxy, \"Machine\")\n        $env:https_proxy = [System.Environment]::GetEnvironmentVariable(\"https_proxy\", \"Machine\")\n        \n        # The agent service needs to be restarted after the proxy environment variable is set in order for the changes to take effect.\n        Restart-Service -Name himds\n    }\n\n    Write-Host \"Connecting Azure Connected Machine Agent\"\n    $context = Get-AzContext\n    $params = @(\"connect\", \"--resource-group\", $resourceGroup, \"--location\", $location, \"--subscription-id\", $subId, \"--tenant-id\", $context.Tenant, \"--tags\", \"Project=jumpstart_azure_arc_sql\", \"--correlation-id\", \"d009f5dd-dba8-4ac7-bac9-b54ef3a6671a\")\n\n    if ($unattended) {\n        $password = $servicePrincipalSecret\n        if ($servicePrincipalSecret -is [SecureString]) {\n            $cred = New-Object -TypeName System.Management.Automation.PSCredential($servicePrincipalAppId, $servicePrincipalSecret)\n            $password = $cred.GetNetworkCredential().Password\n        } \n        $params += \"--service-principal-id\"\n        $params += $servicePrincipalAppId\n        $params += \"--service-principal-secret\"\n        $params += $password\n    }\n    elseif (Get-InstalledModule -Name Az.Accounts -MinimumVersion 2.2) {\n        # New versions of Az.Account support getting access tokens\n        #\n        $token = Get-AzAccessToken\n        $params += \"--access-token\"\n        $params += $token.Token\n    }\n\n    \u0026 \"$env:ProgramFiles\\AzureConnectedMachineAgent\\azcmagent.exe\" $params\n\n    if ($LastExitCode -ne 0) {\n        Write-Error -Message \"Failure when connecting Azure Connected Machine Agent.\"\n        return\n    }\n}\n\nfunction checkResourceCreation($newResource, $instProp, $name) {\n    if ($null -eq $newResource) {\n        Write-Host (\"Failed to create resource: {0}\" -f $name)\n        return\n    }\n    else {\n        Write-Host (\"SQL Server - Azure Arc resource: {0} created\" -f $resource_name)\n    }\n    $errors = New-Object System.Collections.ArrayList\n    foreach ($key in $instProp.Keys) {\n        # check that key exists in created resource\n        if (Get-Member -inputobject $newResource.Properties -name $key -Membertype Properties) {\n            $expectedvalue = $instProp[$key]\n            $foundValue = ($newResource.Properties).$key\n            if ($expectedvalue -ne $foundValue) {\n                $errors.Add(\"Property {0} has value of {1}, but expected {2}\" -f $key, $foundValue, $expectedvalue) \u003e $null\n            }\n        }\n        else {\n            $errors.Add(\"Property {0} expected, but not present in Azure Resource\" -f $key) \u003e $null\n        }\n    }\n    if ($errors.Count -ne 0) {\n        Write-Host (\"Errors found when creating resource: {0}\" -f $newResource.Name)\n        foreach ($e in $errors) {\n            Write-Warning $e\n        }\n    }\n    else {\n        $newResource\n    }\n}\n\nfunction installPowershellModule() {\n    # Ask for user confirmation if running manually\n    #\n    if ( ! $unattended) {\n        $title = 'Confirm Dependency Installation'\n        $question = 'The Azure PowerShell Module is required in order to register SQL Server - Azure Arc resources. Would you like to install it now?'\n        $choices = '\u0026Yes', '\u0026No'\n\n        $decision = $Host.UI.PromptForChoice($title, $question, $choices, 1)\n        if ($decision -eq 1) {\n            Write-Warning \"Azure module install declined.\"\n            return\n        }\n    }\n    # Check if requirements are met for Powershell module install\n    #\n    $version = $PSVersionTable.PSVersion\n    if ([version]$version -lt [version]\"5.1\") {\n        Write-Error \"Could not install Az module: Az module requires Powershell version 5.1.* or above.\"\n        return\n    }\n    if ($PSVersionTable.PSEdition -eq 'Desktop' -and (Get-Module -Name AzureRM -ListAvailable)) {\n        if ([version]$version -lt [version]\"6.2.4\") {\n            Write-Error -Message (\"Could not install Az module: Powershell $version does not support having both the AzureRM and Az modules installed. \" + \n                \"If you need to keep AzureRM available on your system, install the Az module for PowerShell 6.2.4 or later. \" +\n                \"For more information, see: https://docs.microsoft.com/en-us/powershell/azure/migrate-from-azurerm-to-az\")\n            return\n        }\n            \n        Write-Warning -Message \"The Az module will be installed alongside the existing AzureRM module.\"\n    }\n\n    Write-Host \"Installing Az module for PowerShell\"\n    Install-Module -Name Az -AllowClobber -Scope CurrentUser -Force\n}\n\n# Confirm that user is signed in to Azure powershell module\n#\n$context = Get-AzContext\nif (!$context) {\n    if ($unattended) {\n        $securePassword = $servicePrincipalSecret\n        if ($servicePrincipalSecret -is [String]) {\n            Write-Warning -Message \"Saving a plaintext password presents a security risk. Consider storing your password in a secure file.\"\n            $securePassword = ConvertTo-SecureString -String $servicePrincipalSecret -AsPlainText -Force\n        } \n        $pscredential = New-Object -TypeName System.Management.Automation.PSCredential($servicePrincipalAppId, $securePassword)\n        Connect-AzAccount -ServicePrincipal -Credential $pscredential -Tenant $servicePrincipalTenantId\n    }\n    else {\n        Connect-AzAccount -UseDeviceAuthentication\n    }\n    $context = Get-AzContext\n    if (!$context) {\n        Write-Error -Category AuthenticationError -Message \"Please connect your Azure account with `\"Connect-AzAccount`\" before continuing.\"\n            return\n       }\n}\nSet-AzContext -Subscription $subId\n\n# Check if machine is registered with Azure Arc for Servers\n# Register machine if necessary\n#\n$arcResource = Get-AzResource -ResourceType Microsoft.HybridCompute/machines -Name $env:computername\nif ($null -eq $arcResource) {\n    Write-Host \"Arc for Servers resource not found. Registering the current machine now.\"\n\n    registerArcForServers\n\n    $timeout = New-TimeSpan -Seconds 30\n    $stopwatch = [System.Diagnostics.Stopwatch]::StartNew()\n    do {\n        $arcResource = Get-AzResource -ResourceType Microsoft.HybridCompute/machines -Name $env:computername\n        start-sleep -seconds 10\n    } while ($null -eq $arcResource -and $stopwatch.elapsed -lt $timeout)\n\n    if ($null -eq $arcResource) {\n        Write-Error -Message \"Failed to find Arc for Servers resource, registration failed.\"\n        return\n    }\n}\n\n# Iterate over SQL Instances\nif (Test-Path 'HKLM:\\SOFTWARE\\Microsoft\\Microsoft SQL Server') {\n    $inst = (get-itemproperty 'HKLM:\\SOFTWARE\\Microsoft\\Microsoft SQL Server').InstalledInstances\n    if ($inst.Count -eq 0) {\n        Write-Error -Category NotInstalled -Message \"SQL Server is not installed on this machine.\"\n        return\n    }\n    foreach ($i in $inst) {\n        # Read registry data\n        #\n        $p = (Get-ItemProperty 'HKLM:\\SOFTWARE\\Microsoft\\Microsoft SQL Server\\Instance Names\\SQL').$i\n        $setupValues = (Get-ItemProperty \"HKLM:\\SOFTWARE\\Microsoft\\Microsoft SQL Server\\$p\\Setup\")\n        $instEdition = ($setupValues.Edition -split ' ')[0]\n        $portInfo = (Get-ItemProperty \"HKLM:\\SOFTWARE\\Microsoft\\Microsoft SQL Server\\$p\\MSSQLServer\\SuperSocketNetLib\\Tcp\\IPAll\")\n        $currentVersion = (Get-ItemProperty \"HKLM:\\SOFTWARE\\Microsoft\\Microsoft SQL Server\\$p\\MSSQLServer\\CurrentVersion\")\n\n        switch -wildcard ($setupValues.Version) {\n            \"15*\" { $versionname = \"SQL Server 2019\"; }\n            \"14*\" { $versionname = \"SQL Server 2017\"; }\n            \"13*\" { $versionname = \"SQL Server 2016\"; }\n            \"12*\" { $versionname = \"SQL Server 2014\"; }\n            \"11*\" { $versionname = \"SQL Server 2012\"; }\n            \"10.5*\" { $versionname = \"SQL Server 2008 R2\"; }\n            \"10.4*\" { $versionname = \"SQL Server 2008\"; }\n            \"10.3*\" { $versionname = \"SQL Server 2008\"; }\n            \"10.2*\" { $versionname = \"SQL Server 2008\"; }\n            \"10.1*\" { $versionname = \"SQL Server 2008\"; }\n            \"10.0*\" { $versionname = \"SQL Server 2008\"; }\n            \"9*\" { $versionname = \"SQL Server 2005\"; }\n            \"8*\" { $versionname = \"SQL Server 2000\"; }\n            default { $versionname = $setupValues.Version; }\n    }\n\n        # Populate instance properties\n        #\n    $instProp = @{\n        version             = $versionname\n            edition             = $instEdition\n            containerResourceId = $arcResource.ResourceId\n            status              = 'Connected'\n            patchLevel          = $setupValues.PatchLevel\n            instanceName        = $i\n            collation           = $setupValues.Collation\n            currentVersion      = $currentVersion.CurrentVersion\n    }\n    if ($null -ne $setupValues.ProductID) {\n        $instProp[\"productId\"] = $setupValues.ProductID\n    }\n    if (\"\" -ne $portInfo.TcpPort) {\n        $instProp[\"tcpStaticPorts\"] = $portInfo.TcpPort\n    }\n    if (\"\" -ne $portInfo.TcpDynamicPorts) {\n        $instProp[\"tcpDynamicPorts\"] = $portInfo.TcpDynamicPorts\n    }\n            \n        # Locate the error log\n        # Retry finding the error log for up to3 seconds, in case the error log is unavailable\n        #\n    $errorLogPath = (Get-ItemProperty \"HKLM:\\SOFTWARE\\Microsoft\\Microsoft SQL Server\\$p\\Setup\").SQLPath\n\n    $timeout = New-TimeSpan -Seconds 3\n    $stopwatch = [System.Diagnostics.Stopwatch]::StartNew()\n    do {\n        $metadata_files = Select-String -Path \"$errorLogPath\\Log\\ERRORLOG*\" -Pattern \"SQL Server is starting\" -List\n    } while ($metadata_files.count -eq 0 -and $stopwatch.elapsed -lt $timeout)\n\n    if ($metadata_files.count -gt 0) {\n        $error_log = ($metadata_files | ForEach-Object -Process { Get-item $_.Path } | Sort-Object LastWriteTime -Descending)[0]\n        $licensing_info_line = Select-String -Path $error_log.FullName -Pattern \"SQL Server licensing\" -List\n\n        if ( $null -ne $licensing_info_line ) {\n\n            ((Select-String -Path $error_log.FullName -Pattern \"SQL Server licensing\" -List).Line -split ';')[1] -match \"(?\u003cvCores\u003e\\d)\"\n\n            if ($Matches.ContainsKey(\"vCores\")) {\n                $instProp.Add(\"vCore\", $Matches.vCores)\n            }\n        }\n    }\n        else {\n        Write-Warning -Message \"Could not locate SQL Server startup errorlog at $errorLogPath\\Log. The vCore property will not be present in the registered resource.\"\n    }\n\n    $resource_name = $env:computername\n    if ($i -ne \"MSSQLSERVER\") {\n        $resource_name = '{0}_{1}' -f $env:computername, $i\n    }\n\n        # Create resource\n        #\n    $newResource = New-AzResource -Location $location -Properties $instProp -ResourceName $resource_name -Tags $resourceTags -ResourceType Microsoft.AzureArcData/sqlServerInstances -ResourceGroupName $resourceGroup -Force\n    checkResourceCreation -newResource $newResource -instProp $instProp -name $resource_name\n}\n}\nelse {\n    Write-Error -Category NotInstalled -Message \"SQL Server is not installed on this machine.\"\n}\n",
            "content_base64": null,
            "directory_permission": "0777",
            "file_permission": "0777",
            "filename": "scripts/install_arc_agent.ps1",
            "id": "75189f42ad69497722e764d52ce8548b80c7692a",
            "sensitive_content": null,
            "source": null
          },
          "sensitive_attributes": [],
          "private": "bnVsbA=="
        }
      ]
    },
    {
      "mode": "managed",
      "type": "local_file",
      "name": "sql_ps1",
      "provider": "provider[\"registry.terraform.io/hashicorp/local\"]",
      "instances": [
        {
          "schema_version": 0,
          "attributes": {
            "content": "$admin_user = \"Administrator\"\n\n$chocolateyAppList = \"az.powershell,azure-cli,sql-server-management-studio\"\n\nSet-ExecutionPolicy Bypass -Scope Process -Force; [System.Net.ServicePointManager]::SecurityProtocol = [System.Net.ServicePointManager]::SecurityProtocol -bor 3072; iex ((New-Object System.Net.WebClient).DownloadString('https://chocolatey.org/install.ps1'))\n\nif ([string]::IsNullOrWhiteSpace($chocolateyAppList) -eq $false){   \n    Write-Host \"Chocolatey Apps Specified\"  \n    \n    $appsToInstall = $chocolateyAppList -split \",\" | foreach { \"$($_.Trim())\" }\n\n    foreach ($app in $appsToInstall)\n    {\n        Write-Host \"Installing $app\"\n        \u0026 choco install $app /y\n    }\n}\n\n$LogonScript = @'\nStart-Transcript -Path C:\\tmp\\LogonScript.log\n\nWrite-Host \"Installing SQL Server and PowerShell Module\"\nInstall-PackageProvider -Name NuGet -MinimumVersion 2.8.5.201 -Force\nIf(-not(Get-InstalledModule SQLServer -ErrorAction silentlycontinue)){\n    Install-Module SQLServer -Confirm:$False -Force\n}\nchoco install sql-server-2019 -y --params=\"'/IgnorePendingReboot /INSTANCENAME=MSSQLSERVER'\"\nSet-Service -Name SQLBrowser -StartupType Automatic\nStart-Service -Name SQLBrowser\n\nWrite-Host \"Enable SQL TCP\"\n$env:PSModulePath = $env:PSModulePath + \";C:\\Program Files (x86)\\Microsoft SQL Server\\150\\Tools\\PowerShell\\Modules\"\nImport-Module -Name \"sqlps\"\n$smo = 'Microsoft.SqlServer.Management.Smo.'  \n$wmi = new-object ($smo + 'Wmi.ManagedComputer').  \n# List the object properties, including the instance names.  \n$Wmi\n\n# Enable the TCP protocol on the default instance.  \n$uri = \"ManagedComputer[@Name='\" + (get-item env:\\computername).Value + \"']/ServerInstance[@Name='MSSQLSERVER']/ServerProtocol[@Name='Tcp']\" \n$Tcp = $wmi.GetSmoObject($uri)  \n$Tcp.IsEnabled = $true  \n$Tcp.Alter()  \n$Tcp\n\n# Enable the named pipes protocol for the default instance.  \n$uri = \"ManagedComputer[@Name='\" + (get-item env:\\computername).Value + \"']/ServerInstance[@Name='MSSQLSERVER']/ServerProtocol[@Name='Np']\"  \n$Np = $wmi.GetSmoObject($uri)  \n$Np.IsEnabled = $true  \n$Np.Alter()  \n$Np\n\nRestart-Service -Name 'MSSQLSERVER'\n\nWrite-Host \"Creating SQL Server Management Studio Desktop shortcut\"\n$TargetFile = \"C:\\Program Files (x86)\\Microsoft SQL Server Management Studio 18\\Common7\\IDE\\Ssms.exe\"\n$ShortcutFile = \"C:\\Users\\$env:USERNAME\\Desktop\\Microsoft SQL Server Management Studio.lnk\"\n$WScriptShell = New-Object -ComObject WScript.Shell\n$Shortcut = $WScriptShell.CreateShortcut($ShortcutFile)\n$Shortcut.TargetPath = $TargetFile\n$Shortcut.Save()\n\nWrite-Host \"Restoring AdventureWorksLT2019 Sample Database\"\n$script = \"C:\\tmp\\restore_db.ps1\"\n$commandLine = \"$script\"\nStart-Process powershell.exe -ArgumentList $commandline\n\nWrite-Host \"Onboarding to Azure Arc\"\nInvoke-Expression \"C:\\tmp\\install_arc_agent.ps1\"\n\nWrite-Host \"I am deploying Azure Log Analytics workspace and installing the MMA agent. This can take ~10min, hold tight...\"\n$servicePrincipalAppId = \"619d5d9a-26f9-4a1f-9824-83f728e101cf\"\n$servicePrincipalTenantId = \"8dfe9017-7fce-45cd-a294-8799321cc073\"\n$servicePrincipalSecret = \"kvc8Q~tih9fIauJnhavVCrX1DwZnL~DWEU1V9bZy\"\naz login --service-principal --username $servicePrincipalAppId --password $servicePrincipalSecret --tenant $servicePrincipalTenantId\n\n# Set Log Analytics Workspace Environment Variables\n$resourceGroup = \"azure-arc-demo\"\n$WorkspaceName = \"log-analytics-\" + (Get-Random -Maximum 99999)\n$Location = \"westeurope\"\n\n# Get the resource group\nGet-AzResourceGroup -Name $resourceGroup -ErrorAction Stop -Verbose\n\n# Create the workspace\nNew-AzOperationalInsightsWorkspace -Location $Location -Name $WorkspaceName -Sku Standard -ResourceGroupName $resourceGroup -Verbose\n\nWrite-Host \"Enabling Log Analytics Solutions\"\n$Solutions = \"Security\", \"Updates\", \"SQLAssessment\"\nforeach ($solution in $Solutions) {\n    Set-AzOperationalInsightsIntelligencePack -ResourceGroupName $resourceGroup -WorkspaceName $WorkspaceName -IntelligencePackName $solution -Enabled $true -Verbose\n}\n\n# Get the workspace ID and Key\n$workspaceId = $(az resource show --resource-group $resourceGroup --name $WorkspaceName --resource-type \"Microsoft.OperationalInsights/workspaces\" --query properties.customerId -o tsv)\n$workspaceKey = $(az monitor log-analytics workspace get-shared-keys --resource-group $resourceGroup --workspace-name $WorkspaceName --query primarySharedKey -o tsv)\n\n# Deploy MMA Azure Extension ARM Template\nNew-AzResourceGroupDeployment -Name MMA `\n  -ResourceGroupName $resourceGroup `\n  -arcServerName $env:computername `\n  -location $Location `\n  -workspaceId $workspaceId `\n  -workspaceKey $workspaceKey `\n  -TemplateFile C:\\tmp\\mma.json\n\nWrite-Host \"Configuring SQL Azure Assessment\"\nInvoke-WebRequest \"https://github.com/microsoft/azure_arc/raw/main/azure_arc_sqlsrv_jumpstart/aws/winsrv/terraform/scripts/Microsoft.PowerShell.Oms.Assessments.zip\" -OutFile \"C:\\tmp\\Microsoft.PowerShell.Oms.Assessments.zip\"\nExpand-Archive \"C:\\tmp\\Microsoft.PowerShell.Oms.Assessments.zip\" -DestinationPath 'C:\\Program Files\\Microsoft Monitoring Agent\\Agent\\PowerShell'\n$env:PSModulePath = $env:PSModulePath + \";C:\\Program Files\\'Microsoft Monitoring Agent\\Agent\\PowerShell\\Microsoft.PowerShell.Oms.Assessments\\\"\nImport-Module $env:ProgramFiles\\'Microsoft Monitoring Agent\\Agent\\PowerShell\\Microsoft.PowerShell.Oms.Assessments\\Microsoft.PowerShell.Oms.Assessments.dll'\n$SecureString = ConvertTo-SecureString 'AzureArcDemoPassw0rd!' -AsPlainText -Force\nAdd-SQLAssessmentTask -SQLServerName $env:computername -WorkingDirectory \"C:\\sql_assessment\\work_dir\" -RunWithManagedServiceAccount $False -ScheduledTaskUsername $env:USERNAME -ScheduledTaskPassword $SecureString\n\nUnregister-ScheduledTask -TaskName \"LogonScript\" -Confirm:$False\nStop-Process -Name powershell -Force\n'@ \u003e C:\\tmp\\LogonScript.ps1\n\n# Creating LogonScript Windows Scheduled Task\n$Trigger = New-ScheduledTaskTrigger -AtLogOn\n$Action = New-ScheduledTaskAction -Execute \"PowerShell.exe\" -Argument 'C:\\tmp\\LogonScript.ps1'\nRegister-ScheduledTask -TaskName \"LogonScript\" -Trigger $Trigger -User \"Administrator\" -Action $Action -RunLevel \"Highest\" -Force\n\n# Disable Windows Firewall\nWrite-Host \"Disabling Windows Firewall\"\nSet-NetFirewallProfile -Profile Domain,Public,Private -Enabled False\n\n# Disabling Windows Server Manager Scheduled Task\nGet-ScheduledTask -TaskName ServerManager | Disable-ScheduledTask",
            "content_base64": null,
            "directory_permission": "0777",
            "file_permission": "0777",
            "filename": "scripts/sql.ps1",
            "id": "10a3410d84e04f2a7193709613fa2f75e9edca15",
            "sensitive_content": null,
            "source": null
          },
          "sensitive_attributes": [],
          "private": "bnVsbA=="
        }
      ]
    },
    {
      "mode": "managed",
      "type": "random_string",
      "name": "project",
      "provider": "provider[\"registry.terraform.io/hashicorp/random\"]",
      "instances": [
        {
          "schema_version": 2,
          "attributes": {
            "id": "2msr",
            "keepers": null,
            "length": 4,
            "lower": true,
            "min_lower": 0,
            "min_numeric": 0,
            "min_special": 0,
            "min_upper": 0,
            "number": true,
            "numeric": true,
            "override_special": null,
            "result": "2msr",
            "special": false,
            "upper": false
          },
          "sensitive_attributes": []
        }
      ]
    },
    {
      "mode": "managed",
      "type": "yandex_compute_instance",
      "name": "il_vm",
      "provider": "provider[\"registry.terraform.io/yandex-cloud/yandex\"]",
      "instances": [
        {
          "schema_version": 1,
          "attributes": {
            "allow_recreate": null,
            "allow_stopping_for_update": null,
            "boot_disk": [
              {
                "auto_delete": true,
                "device_name": "fomb3p258dsvohhnv9lk",
                "disk_id": "fomb3p258dsvohhnv9lk",
                "initialize_params": [
                  {
                    "block_size": 4096,
                    "description": "",
                    "image_id": "alkt03uv4c4to3jlt059",
                    "name": "",
                    "size": 100,
                    "snapshot_id": "",
                    "type": "network-hdd"
                  }
                ],
                "mode": "READ_WRITE"
              }
            ],
            "created_at": "2022-09-12T09:15:01Z",
            "description": "",
            "folder_id": "b483u8568fn4ch29itgt",
            "fqdn": "fom0pr2gq7rstt8ji9p0.auto.internal",
            "hostname": "",
            "id": "fom0pr2gq7rstt8ji9p0",
            "labels": null,
            "local_disk": [],
            "metadata": {
              "user-data": "#ps1\nnet user Administrator AzureArcDemoPassw0rd!\nSet-ExecutionPolicy Unrestricted -Scope LocalMachine -Force -ErrorAction Ignore\nRemove-Item -Path WSMan:\\Localhost\\listener\\listener* -Recurse\nEnable-PSRemoting -SkipNetworkProfileCheck -Force\nSet-MpPreference -DisableRealtimeMonitoring $true\nnetsh advfirewall set  allprofiles state off\nwinrm quickconfig -q\nwinrm quickconfig -transport:http\nwinrm set winrm/config/service '@{AllowUnencrypted=\"true\"}'\nwinrm set winrm/config/service/auth '@{Basic=\"true\"}'\nwinrm set winrm/config/client/auth '@{Basic=\"true\"}'\nnet stop winrm\nsc.exe config winrm start=auto\nnet start winrm\nRename-Computer -NewName 'sql-arc-vm' -Force\nRestart-Computer -Force\n"
            },
            "name": "sql-arc-vm",
            "network_acceleration_type": "standard",
            "network_interface": [
              {
                "dns_record": [],
                "index": 0,
                "ip_address": "10.200.200.31",
                "ipv4": true,
                "ipv6": false,
                "ipv6_address": "",
                "ipv6_dns_record": [],
                "mac_address": "d0:0d:ce:c5:0d:1f",
                "nat": true,
                "nat_dns_record": [],
                "nat_ip_address": "46.243.144.9",
                "nat_ip_version": "IPV4",
                "security_group_ids": [
                  "ccm5hsjhgeh7mpsv88td"
                ],
                "subnet_id": "ddkrrbf6dmpl1o9m7bk7"
              }
            ],
            "placement_policy": [
              {
                "host_affinity_rules": [],
                "placement_group_id": ""
              }
            ],
            "platform_id": "standard-v3",
            "resources": [
              {
                "core_fraction": 100,
                "cores": 4,
                "gpus": 0,
                "memory": 8
              }
            ],
            "scheduling_policy": [
              {
                "preemptible": false
              }
            ],
            "secondary_disk": [],
            "service_account_id": "",
            "status": "running",
            "timeouts": null,
            "zone": "il1-a"
          },
          "sensitive_attributes": [],
          "private": "eyJlMmJmYjczMC1lY2FhLTExZTYtOGY4OC0zNDM2M2JjN2M0YzAiOnsiY3JlYXRlIjozMDAwMDAwMDAwMDAsImRlbGV0ZSI6MzAwMDAwMDAwMDAwLCJ1cGRhdGUiOjMwMDAwMDAwMDAwMH0sInNjaGVtYV92ZXJzaW9uIjoiMSJ9",
          "dependencies": [
            "data.template_file.user_data",
            "yandex_vpc_security_group.il_sg",
            "yandex_vpc_subnet.il_subnet"
          ]
        }
      ]
    },
    {
      "mode": "managed",
      "type": "yandex_vpc_network",
      "name": "il_vpc",
      "provider": "provider[\"registry.terraform.io/yandex-cloud/yandex\"]",
      "instances": [
        {
          "schema_version": 0,
          "attributes": {
            "created_at": "2022-09-12T07:38:50Z",
            "default_security_group_id": "",
            "description": "VPC for Arc-enabled SQL VM",
            "folder_id": "b483u8568fn4ch29itgt",
            "id": "ccm8qebacb7jbjabhsdd",
            "labels": {},
            "name": "sql-arc-2msr",
            "subnet_ids": [
              "ddkrrbf6dmpl1o9m7bk7"
            ],
            "timeouts": null
          },
          "sensitive_attributes": [],
          "private": "eyJlMmJmYjczMC1lY2FhLTExZTYtOGY4OC0zNDM2M2JjN2M0YzAiOnsiY3JlYXRlIjo2MDAwMDAwMDAwMCwiZGVsZXRlIjo2MDAwMDAwMDAwMCwidXBkYXRlIjo2MDAwMDAwMDAwMH19",
          "dependencies": [
            "random_string.project"
          ]
        }
      ]
    },
    {
      "mode": "managed",
      "type": "yandex_vpc_security_group",
      "name": "il_sg",
      "provider": "provider[\"registry.terraform.io/yandex-cloud/yandex\"]",
      "instances": [
        {
          "schema_version": 0,
          "attributes": {
            "created_at": "2022-09-12T07:38:51Z",
            "description": "SQL Arc-enabled VM Security Group",
            "egress": [
              {
                "description": "outgoing-all",
                "from_port": 0,
                "id": "ccmev95h9kha0k8t17dj",
                "labels": {},
                "port": -1,
                "predefined_target": "",
                "protocol": "ANY",
                "security_group_id": "",
                "to_port": 65535,
                "v4_cidr_blocks": [
                  "0.0.0.0/0"
                ],
                "v6_cidr_blocks": []
              }
            ],
            "folder_id": "b483u8568fn4ch29itgt",
            "id": "ccm5hsjhgeh7mpsv88td",
            "ingress": [
              {
                "description": "incoming-rdp",
                "from_port": -1,
                "id": "ccmirpe1sng5g6iu4p41",
                "labels": {},
                "port": 3389,
                "predefined_target": "",
                "protocol": "TCP",
                "security_group_id": "",
                "to_port": -1,
                "v4_cidr_blocks": [
                  "0.0.0.0/0"
                ],
                "v6_cidr_blocks": []
              },
              {
                "description": "incoming-winrm",
                "from_port": 5985,
                "id": "ccm6vvtf18g83av3i09r",
                "labels": {},
                "port": -1,
                "predefined_target": "",
                "protocol": "TCP",
                "security_group_id": "",
                "to_port": 5986,
                "v4_cidr_blocks": [
                  "0.0.0.0/0"
                ],
                "v6_cidr_blocks": []
              }
            ],
            "labels": {},
            "name": "sql-arc-sg-2msr",
            "network_id": "ccm8qebacb7jbjabhsdd",
            "status": "ACTIVE",
            "timeouts": null
          },
          "sensitive_attributes": [],
          "private": "eyJlMmJmYjczMC1lY2FhLTExZTYtOGY4OC0zNDM2M2JjN2M0YzAiOnsiY3JlYXRlIjoxODAwMDAwMDAwMDAsImRlbGV0ZSI6MTgwMDAwMDAwMDAwLCJ1cGRhdGUiOjE4MDAwMDAwMDAwMH19",
          "dependencies": [
            "random_string.project",
            "yandex_vpc_network.il_vpc"
          ]
        }
      ]
    },
    {
      "mode": "managed",
      "type": "yandex_vpc_subnet",
      "name": "il_subnet",
      "provider": "provider[\"registry.terraform.io/yandex-cloud/yandex\"]",
      "instances": [
        {
          "schema_version": 0,
          "attributes": {
            "created_at": "2022-09-12T07:38:51Z",
            "description": "",
            "dhcp_options": [],
            "folder_id": "b483u8568fn4ch29itgt",
            "id": "ddkrrbf6dmpl1o9m7bk7",
            "labels": {},
            "name": "sql-arc-subnet-2msr",
            "network_id": "ccm8qebacb7jbjabhsdd",
            "route_table_id": "",
            "timeouts": null,
            "v4_cidr_blocks": [
              "10.200.200.0/24"
            ],
            "v6_cidr_blocks": [],
            "zone": "il1-a"
          },
          "sensitive_attributes": [],
          "private": "eyJlMmJmYjczMC1lY2FhLTExZTYtOGY4OC0zNDM2M2JjN2M0YzAiOnsiY3JlYXRlIjoxODAwMDAwMDAwMDAsImRlbGV0ZSI6MTgwMDAwMDAwMDAwLCJ1cGRhdGUiOjE4MDAwMDAwMDAwMH19",
          "dependencies": [
            "random_string.project",
            "yandex_vpc_network.il_vpc"
          ]
        }
      ]
    }
  ]
}
